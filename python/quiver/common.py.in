#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

__version__ = "@version@"

import argparse as _argparse
import json as _json
import numpy as _numpy
import os as _os
import plano as _plano
import resource as _resource
import shlex as _shlex
import signal as _signal
import subprocess as _subprocess
import sys as _sys
import tempfile as _tempfile
import time as _time

from urllib.parse import urlparse as _urlparse

_home = _os.environ.get("QUIVER_HOME", "@default_home@")

_impls = []
_impls_by_name = {}
_impl_names_by_alias = {}

class _Impl(object):
    def __init__(self, kind, name, aliases=[], protocols=["amqp"], peer_to_peer=False, executable=None):
        self.kind = kind
        self.name = name
        self.aliases = aliases
        self.protocols = protocols
        self.peer_to_peer = peer_to_peer
        self.executable = executable

        _impls.append(self)
        _impls_by_name[self.name] = self

        for alias in self.aliases:
            _impl_names_by_alias[alias] = self.name

    @property
    def file(self):
        return _plano.join(_home, "impls", "quiver-{}-{}".format(self.kind, self.name))

    @property
    def available(self):
        if not _plano.is_file(self.file):
            return False

        if self.executable is not None and _plano.which(self.executable) is None:
            return False

        return True

_Impl("arrow", "activemq-artemis-jms", aliases=["artemis-jms"], protocols=["core"])
_Impl("arrow", "qpid-jms", aliases=["jms"])
_Impl("arrow", "qpid-proton-c", aliases=["c"], peer_to_peer=True)
_Impl("arrow", "qpid-proton-cpp", aliases=["cpp"], peer_to_peer=True)
_Impl("arrow", "qpid-proton-python", aliases=["python", "py"], peer_to_peer=True)
_Impl("arrow", "qpid-protonj2", aliases=["protonj2"])
_Impl("arrow", "qpid-proton-dotnet", aliases=["proton-dotnet", "dotnet"])
_Impl("arrow", "rhea", aliases=["javascript", "js"], peer_to_peer=True)
_Impl("arrow", "vertx-proton", aliases=["java"])

_Impl("server", "activemq-artemis", aliases=["artemis"], protocols=["amqp", "openwire", "core"], executable="artemis")
_Impl("server", "builtin")
_Impl("server", "qpid-dispatch", aliases=["qdrouterd", "dispatch"], executable="qdrouterd")

def get_impl(name):
    try:
        name = _impl_names_by_alias[name]
    except KeyError:
        pass

    try:
        return _impls_by_name[name]
    except KeyError:
        pass

def require_impl(name, fallback=None):
    impl = get_impl(name)

    if impl is None:
        impl = get_impl(fallback)

    if impl is None:
        raise CommandError("No implementation for '{}'", name)

    if not impl.available:
        raise CommandError("No implementation for '{}'", impl.name)

    return impl

def impl_available(name):
    impl = get_impl(name)
    return impl is not None and impl.available

ARROW_IMPLS = [x.name for x in _impls if x.kind == "arrow"]
PEER_TO_PEER_ARROW_IMPLS = [x.name for x in _impls if x.kind == "arrow" and x.peer_to_peer]
AMQP_ARROW_IMPLS = [x.name for x in _impls if x.kind == "arrow" and "amqp" in x.protocols]
OPENWIRE_ARROW_IMPLS = [x.name for x in _impls if x.kind == "arrow" and "openwire" in x.protocols]
CORE_PROTOCOL_ARROW_IMPLS = [x.name for x in _impls if x.kind == "arrow" and "core" in x.protocols]

SERVER_IMPLS = [x.name for x in _impls if x.kind == "server"]
AMQP_SERVER_IMPLS = [x.name for x in _impls if x.kind == "server" and "amqp" in x.protocols]
OPENWIRE_SERVER_IMPLS = [x.name for x in _impls if x.kind == "server" and "openwire" in x.protocols]
CORE_PROTOCOL_SERVER_IMPLS = [x.name for x in _impls if x.kind == "server" and "core" in x.protocols]

DEFAULT_ARROW_IMPL = "qpid-proton-c"
DEFAULT_SERVER_IMPL = "builtin"
PEER_TO_PEER_URL = "amqp://localhost:56727/quiver"

_epilog_arrow_impls = """
arrow implementations:
  activemq-artemis-jms            Client mode only; requires Artemis server
  qpid-jms (jms)                  Client mode only
  qpid-proton-c (c)               The default implementation
  qpid-proton-cpp (cpp)
  qpid-proton-python (python, py)
  qpid-protonj2 (java)            Client mode only
  qpid-proton-dotnet (.NET)       Client mode only
  rhea (javascript, js)
  vertx-proton (java)             Client mode only
"""

_epilog_server_impls = """
server implementations:
  activemq-artemis (artemis)
  builtin                         The default implementation
  qpid-dispatch (dispatch, qdrouterd)
"""

_epilog_urls = """
URLs:
  [SCHEME:][//SERVER/]ADDRESS     The default server is 'localhost'
  queue0
  //localhost/queue0
  amqp://example.net:10000/jobs
  amqps://10.0.0.10/jobs/alpha
  amqps://username:password@10.0.0.10/jobs/alpha
"""

_epilog_count_and_duration_formats = """
count format:                     duration format:
  1 (no unit)    1                  1 (no unit)    1 second
  1k             1,000              1s             1 second
  1m             1,000,000          1m             1 minute
                                    1h             1 hour
"""

class CommandError(Exception):
    def __init__(self, message, *args):
        if isinstance(message, Exception):
            message = str(message)

        message = message.format(*args)

        super(CommandError, self).__init__(message)

class Command(object):
    def __init__(self, home_dir):
        self.home_dir = home_dir

        self.parser = _ArgumentParser()
        self.parser.formatter_class = _Formatter

        self.init_only = False
        self.quiet = False
        self.verbose = False

        self.args = None

    def init(self):
        assert self.parser is not None
        assert self.args is None

        _plano.enable_logging("warn")

        self.args = self.parser.parse_args()

    def add_common_test_arguments(self):
        self.parser.add_argument("-d", "--duration", metavar="DURATION",
                                 help="Stop after DURATION (default 30s)",
                                 default="30s")
        self.parser.add_argument("-c", "--count", metavar="COUNT",
                                 help="Send or receive COUNT messages (default 0, no limit)",
                                 default="0")
        self.parser.add_argument("--rate", metavar="COUNT",
                                 help="Target a rate of COUNT messages per second (default 0, disabled)",
                                 default="0")
        self.parser.add_argument("--body-size", metavar="COUNT",
                                 help="Send message bodies containing COUNT bytes (default 100)",
                                 default="100")
        self.parser.add_argument("--credit", metavar="COUNT",
                                 help="Sustain credit for COUNT incoming messages (default 1000)",
                                 default="1000")
        self.parser.add_argument("--transaction-size", metavar="COUNT",
                                 help="Transfer batches of COUNT messages inside transactions " \
                                 "(default 0, disabled)",
                                 default="0")
        self.parser.add_argument("--durable", action="store_true",
                                 help="Require persistent store-and-forward transfers")
        self.parser.add_argument("--set-message-id", action="store_true",
                                 help="Send each message with a message ID and read it on receive")
        self.parser.add_argument("--timeout", metavar="DURATION",
                                 help="Fail after DURATION without transfers (default 10s)",
                                 default="10")

    def add_common_tool_arguments(self):
        self.parser.add_argument("--quiet", action="store_true",
                                 help="Print nothing to the console")
        self.parser.add_argument("--verbose", action="store_true",
                                 help="Print details to the console")
        self.parser.add_argument("--init-only", action="store_true",
                                 help="Initialize and exit")
        self.parser.add_argument('--version', action='version',
                                 help="Print the version and exit",
                                 version="%(prog)s {}".format(__version__))

    def add_common_tls_arguments(self):
        self.parser.add_argument("--cert", metavar="FILE",
                                 help="The client TLS certificate file")
        self.parser.add_argument("--key", metavar="FILE",
                                 help="The client TLS private key file")

    def init_common_test_attributes(self):
        self.count = self.parse_count(self.args.count)
        self.duration = self.parse_duration(self.args.duration)
        self.rate = self.parse_count(self.args.rate)
        self.body_size = self.parse_count(self.args.body_size)
        self.credit_window = self.parse_count(self.args.credit)
        self.transaction_size = self.parse_count(self.args.transaction_size)
        self.durable = self.args.durable
        self.set_message_id = self.args.set_message_id
        self.timeout = self.parse_duration(self.args.timeout)

    def init_common_tool_attributes(self):
        self.init_only = self.args.init_only
        self.quiet = self.args.quiet
        self.verbose = self.args.verbose

        if self.quiet:
            _plano.enable_logging("error")

        if self.verbose:
            _plano.enable_logging("notice")

    def init_url_attributes(self):
        self.url = self.args.url

        if self.url is None:
            self.url = PEER_TO_PEER_URL

        url = _urlparse(self.url)

        if url.path is None:
            raise CommandError("The URL has no path")

        self.scheme = url.scheme
        self.host = url.hostname
        self.port = url.port
        self.path = url.path
        self.username = url.username
        self.password = url.password

        if self.host is None:
            self.host = "localhost"

        if self.port is None:
            self.port = "5672"

        if self.scheme is None:
            self.port = "amqp"

        self.port = str(self.port)

        if self.path.startswith("/"):
            self.path = self.path[1:]

    def init_output_dir(self):
        self.output_dir = self.args.output

        if self.output_dir is None:
            self.output_dir = _tempfile.mkdtemp(prefix="quiver-")

        _plano.make_dir(self.output_dir)

        _plano.notice("Saving output files to '{}'", self.output_dir)

    def parse_count(self, value):
        assert self.parser is not None

        try:
            if value.endswith("m"): return int(value[:-1]) * 1000 * 1000
            if value.endswith("k"): return int(value[:-1]) * 1000
            return int(value)
        except (AttributeError, ValueError):
            self.parser.error("Failure parsing '{}' as integer with unit".format(value))

    def parse_duration(self, value):
        assert self.parser is not None

        try:
            if value.endswith("h"): return int(value[:-1]) * 60 * 60
            if value.endswith("m"): return int(value[:-1]) * 60
            if value.endswith("s"): return int(value[:-1])
            return int(value)
        except (AttributeError, ValueError):
            self.parser.error("Failure parsing '{}' as integer with unit".format(value))

    def intercept_info_request(self, default_impl):
        if "--info" in _plano.ARGS:
            _plano.enable_logging("warn")

            parser = _argparse.ArgumentParser()
            parser.add_argument("--impl", default=default_impl)

            args, other = parser.parse_known_args(_plano.ARGS)
            impl = require_impl(args.impl)

            _plano.run(impl.file)
            _plano.exit(0)

    def run(self):
        raise NotImplementedError()

    def main(self):
        try:
            self.init()

            if self.init_only:
                return

            self.run()
        except CommandError as e:
            _plano.exit(str(e))
        except KeyboardInterrupt:
            pass

class _ArgumentParser(_argparse.ArgumentParser):
    def error(self, message):
        self.print_usage(_sys.stderr)
        raise CommandError(message)

class _Formatter(_argparse.RawDescriptionHelpFormatter):
    pass

def parse_keyword_args(args):
    return dict([x.split("=", 1) for x in args])

def now():
    return int(_time.time() * 1000)

def print_heading(name):
    print()
    print(name.upper())
    print()

def print_field(name, value):
    name = "{} ".format(name)
    value = " {}".format(value)
    print("{:.<19}{:.>42}".format(name, value))

def print_numeric_field(name, value, unit, fmt="{:,.0f}"):
    name = "{} ".format(name)

    if value is None:
        value = "-"
    elif fmt is not None:
        value = fmt.format(value)

    value = " {}".format(value)

    print("{:.<24}{:.>37} {}".format(name, value, unit))

def print_latency_fields(lname, lvalue, rname, rvalue):
    lvalue = " {}".format(lvalue)
    rvalue = " {}".format(rvalue)
    print("{:>12} {:.>10} ms {:>12} {:.>10} ms".format(lname, lvalue, rname, rvalue))
