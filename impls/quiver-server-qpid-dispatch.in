#!/usr/bin/env python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
import sys

default_home = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default_home)
sys.path.insert(0, os.path.join(home, "python"))

from plano import *
from quiver.common import *

config_template = """
router {{
    mode: standalone
    id: quiver-test-router
}}

listener {{
    host: {}
    port: {}
    linkCapacity: 1000
    authenticatePeer: off
    saslMechanisms: ANONYMOUS
}}
"""

running = True

def main():
    enable_logging("warn")

    if which("qdrouterd") is None:
        exit("The 'qdouterd' command is not on the path")

    if len(ARGS) == 1:
        call("qdrouterd --version")
        exit()

    kwargs = parse_keyword_args(ARGS[1:])

    host = kwargs["host"]
    port = kwargs["port"]
    path = kwargs["path"]
    ready_file = kwargs["ready-file"]

    config = config_template.format(host, port)
    config_file = write(make_temp_file(), config)

    import signal

    proc = start_process("qdrouterd --config {}", config_file)
    # proc = start_process("jemalloc.sh qdrouterd --config {}", config_file)

    def handle_sigterm(a, b):
        global running
        proc.terminate()
        running = False
        print("Doooowwn")

    signal.signal(signal.SIGINT, handle_sigterm)
    signal.signal(signal.SIGTERM, handle_sigterm)

    wait_for_port(port)

    if ready_file != "-":
        write(ready_file, "ready\n")

    sleep(3)

    pid = call_for_stdout("pgrep -nx qdrouterd")
    call(f"perf stat -d -d -p {pid} --timeout 10000")
    # call(f"perf record -g -p {pid} sleep 10")
    # call(f"perf script flamegraph -F 99 -p {pid} sleep 10")

    while running:
        sleep(1)

try:
    main()
except KeyboardInterrupt:
    pass
